module actionlanguage

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/ActionLanguage
  lib/editor-common.generated
  check
  generate
  refactor
  toolchain // Strategies to compile and run
  
// import instrumentation file "sel-al.str", this file references all other required files.
imports
    instrument/sel-al

imports
	lib-refactoring/fetch-positions.generated
	
rules // Main editor interface (defined by editor/ActionLanguage-Builders and -References.esv)
  
  find-position :
  input @ (selected, position, ast, path, project-path) -> ("temp.txt", "foo")
  with
      <debug(!"AST: ")> ast
      ; <debug(!"SELECTED: ")> selected
      ; <debug(!"POSITION: ")> position
      //; <fetch-up-position(debug(!"TRAVERSE: "); ?Module(_,_)|ast)> [0]
      //; debug(!"FETCH UP: ")
      ; <position-of-term(debug(!"TRAVERSE: "); ?selected)> ast
      ; debug(!"POSITION OF TERM: ")
      //; ast-with-marker  := <at-position(!<id>{MARKER()}|[1,0,1,0,1])> ast
      //; debug(!"AST_WITH_MARKER")
      ; position' := <position-of-term(?"User")> ast
      ; debug(!"POSITION OF ?USER: ")
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
  
  // Transforms a selection to Java
  generate-java:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"java")> path;
      result   := <debug(!"GENERATE"); try-to-java> selected
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      <debug(!"Resolve: ")> node; 
      <debug(!"Resolve position")> position;
      p := <parent-at-position(|position)> ast;
      <debug(!"Resolve parent:")> p;
      Type(type) := node; 
      target     := <GetEntity> type

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) ->
    ["String", "Int" | proposals]
    where
      if !node => Type(COMPLETION(prefix)) then
        proposals := <all-keys-GetEntity>
      end


      


  run-program:
  	input @ (selected, position, ast, path, project-path) -> (stdout-filename, result)
  	    with
  	      <create-java-path-tuple(|"release")> ast ; // initialize paths for code generation
	      ?(java-filename, bin-directory, classname, stdout-filename) ;
	      java-code := <try-to-java> ast; // ast is a ActionLanguage ast
	      !(java-filename, bin-directory, classname, java-code, stdout-filename);
	      //compile-and-run-java-code; // compile classes to same directory as source
	      compile-run-wrapper; // compile classes to same directory as source
	      ?result

  debug-program:
      input @ (selected, position, ast, path, project-path) -> (stdout-filename, result)
      with
          // TODO: instrument all files in a given directory, but for now just do a single file because ALNG-programs are single-files...
          instrumented-ast := <instrument-ast> (path, ast);
          <run-program-ast> instrumented-ast;
          ?result;
          stdout-filename := "debug.out.txt"
imports
    instrument/init
    libdsldi
    
rules
	instrument-single-file:
	    input @ (selected, position, ast, path, project-path) -> (instrumented-filename, pp-output)
	    with
	    	instrumented-filename := <guarantee-extension(|"debug.alng")> path
	    	// init instrumentation tool
	    	; init-config
            ; init-dsldi
            ; <set-config> ("--input-dir", project-path)
            ; <set-config> ("--input-file", path)
            ; <set-config> ("--output-dir", "gen-code/al/debug/working")
            ; <set-config> ("--pipe", ())
            ; <set-verbosity> 4
            ; execute
            ; ?output // output is in ATerm
            ; pp-actionlanguage-string
            ; ?pp-output
